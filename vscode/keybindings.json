[
  // toggle sidebar when editor is not focused
  // (vim plugin handles editor focused case)
  // TODO: get these working
  //   {
  //     "key": "space e",
  //     "command": "workbench.action.toggleSidebarVisibility",
  //     "when": "!editorTextFocus && !terminalFocus && !inQuickOpen"
  //   },
  // {
  //     "key": "space f",
  //     "command": "workbench.action.quickOpen",
  //     "when": "!editorTextFocus && !terminalFocus"
  // },
  // splits
  {
    "key": "ctrl+v",
    "command": "workbench.action.splitEditor",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.splitEditorOrthogonal",
    "when": "editorFocus"
  },
  // vim commands in quick open widget
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  // NOTE: Opening horizontal split is not possible
  {
    "key": "ctrl+v",
    "command": "workbench.action.alternativeAcceptSelectedQuickOpenItem",
    "when": "inQuickOpen"
  },
  // explorer commands
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "l",
    "command": "list.select",
    "when": "!inputFocus"
  },
  {
    "key": "o",
    "command": "list.toggleExpand",
    "when": "!inputFocus"
  },
  {
    "key": "h",
    "command": "list.collapse",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  // NOTE: Opening horizontal split is not possible
  {
    "key": "v",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  // vim commands for panel
  {
    "key": "ctrl+g",
    "command": "workbench.action.closePanel",
    "when": "panelFocus"
  },
  // vim commands for find widget
  {
    "key": "ctrl+g",
    "command": "closeFindWidget",
    "when": "findWidgetVisible"
  },
  // vim navigation across tabs
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    // this is needed so that C-j still works to nav through quickopen
    "when": "!inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    // this is needed so that C-k still works to nav through quickopen
    "when": "!inQuickOpen"
  },
  // project manager shortcuts
  {
    "key": "ctrl+cmd+p",
    "command": "projectManager.listProjectsNewWindow"
  },
  // intellisense shortcuts
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  // make tab navigation work properly
  {
    "key": "cmd+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "cmd+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "cmd+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "cmd+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "cmd+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "cmd+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "cmd+9",
    "command": "workbench.action.openEditorAtIndex9"
  },
  // send scrolling vim keybindings to neovim
  // {
  //   "key": "ctrl+e",
  //   "command": "vscode-neovim.send",
  //   "when": "editorTextFocus && neovim.mode != insert",
  //   "args": "<C-e>"
  // },
  // {
  //   "key": "ctrl+y",
  //   "command": "vscode-neovim.send",
  //   "when": "editorTextFocus && neovim.mode != insert",
  //   "args": "<C-y>"
  // },
  // https://github.com/vscode-neovim/vscode-neovim/issues/361
  {
    "key": "ctrl+y",
    "command": "editorScroll",
    "when": "textInputFocus",
    "args": {
      "to": "up",
      "value": 3,
      "by": "line",
      "revealCursor": true
    }
  },
  {
    "key": "ctrl+e",
    "command": "editorScroll",
    "when": "textInputFocus",
    "args": {
      "to": "down",
      "value": 3,
      "by": "line",
      "revealCursor": true
    }
  },
  // vim window commands
  {
    "key": "ctrl+w m",
    "command": "workbench.action.joinAllGroups"
  },
  {
    "key": "ctrl+w =",
    "command": "workbench.action.evenEditorWidths"
  },
  {
    "key": "ctrl+w o",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode != insert",
    "args": "<C-w>o"
  },
  {
    "key": "ctrl+w l",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "key": "ctrl+w k",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "key": "ctrl+w j",
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  // misc commands
  {
    "key": "ctrl+v",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "cmd+enter",
    "command": "workbench.action.maximizeEditor"
  },
  // disable clashing default bindings
  {
    "key": "shift+tab",
    "command": "-acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
  },
  {
    "key": "cmd+enter",
    "command": "-breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  // pane resizing
  {
    "key": "left",
    "command": "workbench.action.decreaseViewSize",
    "when": "editorFocus && neovim.mode != insert"
  },
  {
    "key": "right",
    "command": "workbench.action.increaseViewSize",
    "when": "editorFocus && neovim.mode != insert"
  },
  {
    "key": "down",
    "command": "workbench.action.decreaseViewSize",
    "when": "editorFocus && neovim.mode != insert"
  },
  {
    "key": "up",
    "command": "workbench.action.increaseViewSize",
    "when": "editorFocus && neovim.mode != insert"
  }
]